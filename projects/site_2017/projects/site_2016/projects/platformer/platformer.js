// Generated by CoffeeScript 1.6.3
var Level, Monster, Mummy, Onion, Platform, Slime, ani, ani6, ani8, animFrame, animInterval, canvas, continueGame, deleteFrom, distance, draw, drawInterval, drawRect, frame, frameInterval, fs, g, imgBank, initRecords, intersect, jump, keys, left, levels, lvl, makeMap, maxlvl, monsters, moveCamX, pauseGame, paused, pl, plAni, plAniInterval, platforms, pointIntersect, printLevels, right, screens, scrollX, scrollY, setScreen, startGame, stopGame, topOf, _ref, _ref1, _ref2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Platform = (function() {
  function Platform(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.readImgs();
  }

  Platform.prototype.readImgs = function() {
    var i, _i, _len, _ref, _results;
    this.imgs = [];
    _ref = levels[lvl].ptfm;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(this.imgs.push(imgBank.get(i)));
    }
    return _results;
  };

  Platform.prototype.draw = function(g) {
    var i, _results;
    g.drawImage(this.imgs[0], this.x, this.y);
    g.drawImage(this.imgs[1], this.x + this.w - 16, this.y);
    i = 0;
    _results = [];
    while (i * 64 < this.w - 32) {
      g.drawImage(this.imgs[2], this.x + i * 64 + 16, this.y);
      _results.push(++i);
    }
    return _results;
  };

  return Platform;

})();

Level = (function() {
  function Level(options) {
    this.name = options.name, this.img = options.img, this.ptfm = options.ptfm, this.getMob = options.getMob, this.ground = options.ground, this.bg = options.bg, this.bbg = options.bbg, this.unlock = options.unlock;
  }

  Level.prototype.getPlm = function() {
    var r, w, x, y, _ref;
    x = topOf(platforms).x + topOf(platforms).w / 3;
    x += (topOf(platforms).w + 75) * Math.random();
    x |= 0;
    y = topOf(platforms).y;
    while (!((100 > (_ref = Math.abs(y - topOf(platforms).y)) && _ref > 64))) {
      y = 32 + (canvas.height - 24) * Math.random();
      y -= y % 25;
    }
    w = 64 * Math.floor(Math.random() * 3 + 1) + 32;
    r = new Platform(x, y, w, 16);
    this.getMob(r);
    return r;
  };

  return Level;

})();

levels = [
  new Level({
    name: "Forest",
    img: "img/forest.png",
    ptfm: ["ptfm-0-0.png", "ptfm-0-1.png", "ptfm-0-2.png"],
    getMob: function(p) {
      if (Math.random() < 0.1) {
        monsters.push(new Slime(p));
      }
      if (Math.random() < 0.1) {
        return monsters.push(new Onion(p));
      }
    },
    ground: "marsh.png",
    bg: "bg-0.png",
    bbg: "bg-mountains.png",
    unlock: 0
  }), new Level({
    name: "Egypt",
    img: "img/egypt.png",
    ptfm: ["ptfm-1-0.png", "ptfm-1-1.png", "ptfm-1-2.png"],
    getMob: function(p) {
      if (Math.random() < 0.1) {
        monsters.push(new Slime(p));
      }
      if (Math.random() < 0.2) {
        return monsters.push(new Mummy(p));
      }
    },
    ground: "sand.png",
    bg: "bg-1.png",
    bbg: "bg-wall.png",
    unlock: 200
  })
];

printLevels = function() {
  var $btn, $wrap, i, level, locked;
  $('#level-list').html("");
  for (i in levels) {
    level = levels[i];
    locked = level.unlock > 0 && level.unlock > levels[i - 1].record;
    $btn = $('<button class="bigBtn center">');
    $btn.data('lvl', i);
    if (!locked) {
      $btn.click(function() {
        return startGame($(this).data('lvl'));
      });
    }
    $wrap = $("<div class='img-wrap'><img src='" + level.img + "'></div>");
    if (locked) {
      $wrap.append('<img src="img/lock.png">');
    }
    if (locked) {
      $btn.append($wrap).append(level.name).append("<p>run " + level.unlock + "m to unlock</p>");
    } else {
      $btn.append($wrap).append(level.name).append("<p>" + level.record + "m</p>");
    }
    $('#level-list').append($('<div class="slide center">').append($btn));
  }
  $('#level-list').append('\
                <div class="slide center">\
                    <button class="bigBtn center">\
                        <div class="img-wrap">\
                        <img src="img/soon.png"><br>\
                        </div>\
                        Soon\
                    </button>\
                </div>');
  return $('.slide').css({
    width: (width() - 300) + "px",
    height: height() + "px"
  });
};

topOf = function(array) {
  return array[array.length - 1];
};

deleteFrom = function(del, array) {
  var i, _i, _ref, _results;
  _results = [];
  for (i = _i = 0, _ref = del.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(array.splice(del[i] - i, 1));
  }
  return _results;
};

canvas = null;

g = null;

scrollX = 0;

scrollY = 0;

platforms = [];

monsters = [];

fs = 5;

ani = 0;

ani8 = 0;

ani6 = 0;

drawInterval = null;

animInterval = null;

plAniInterval = null;

frameInterval = null;

paused = false;

maxlvl = 2;

lvl = null;

distance = 0;

keys = {
  up: false,
  rifht: false,
  left: false
};

pl = {
  x: 0,
  y: 0,
  w: 32,
  h: 40,
  hp: 3,
  maxHp: 3,
  blink: 0,
  speed: 0.8,
  irany: {
    x: 0,
    y: 0
  },
  imgIr: 1,
  intersects: function() {
    var i, _i, _len;
    for (_i = 0, _len = platforms.length; _i < _len; _i++) {
      i = platforms[_i];
      if (pointIntersect(this.x, this.y, i.x, i.y, i.w, i.h) || pointIntersect(this.x + this.w, this.y, i.x, i.y, i.w, i.h)) {
        this.y = i.y + i.h + 1;
        return true;
      }
      if (pointIntersect(this.x, this.y + this.h, i.x, i.y, i.w, i.h) || pointIntersect(this.x + this.w, this.y + this.h, i.x, i.y, i.w, i.h)) {
        this.y = i.y - this.h;
        return true;
      }
    }
    return false;
  },
  init: function() {
    this.x = 0;
    this.y = 0;
    this.hp = 3;
    this.maxHp = 3;
    this.blink = 0;
    this.irany.x = 0;
    this.irany.y = 0;
    return this.imgIr = 1;
  }
};

imgBank = {
  nimg: {},
  mimg: {},
  get: function(name, scale) {
    var img;
    if (!this.nimg[name]) {
      img = new Image();
      img.src = "img/" + name;
      this.nimg[name] = scale ? resize(img, scale) : img;
    }
    return this.nimg[name];
  }
};

pointIntersect = function(x, y, dx, dy, w, h) {
  return x >= dx && x <= dx + w && y >= dy && y <= dy + h;
};

intersect = function(a, b, full, all) {
  var i, r;
  if (full == null) {
    full = false;
  }
  if (all == null) {
    all = false;
  }
  r = all ? [] : false;
  if (Array.isArray(a)) {
    for (i in a) {
      if (intersect(a[i], b, full, all)) {
        if (all) {
          r.push(i);
        } else {
          return i;
        }
      }
    }
    return r;
  }
  if (Array.isArray(b)) {
    for (i in b) {
      if (intersect(a, b[i], full, all)) {
        if (all) {
          r.push(i);
        } else {
          return i;
        }
      }
    }
    return r;
  }
  if (!full) {
    return pointIntersect(a.x, a.y, b.x, b.y, b.w, b.h) || pointIntersect(a.x + a.w, a.y, b.x, b.y, b.w, b.h) || pointIntersect(a.x, a.y + a.h, b.x, b.y, b.w, b.h) || pointIntersect(a.x + a.w, a.y + a.h, b.x, b.y, b.w, b.h);
  } else {
    return pointIntersect(a.x, a.y, b.x, b.y, b.w, b.h) && pointIntersect(a.x + a.w, a.y, b.x, b.y, b.w, b.h) && pointIntersect(a.x, a.y + a.h, b.x, b.y, b.w, b.h) && pointIntersect(a.x + a.w, a.y + a.h, b.x, b.y, b.w, b.h);
  }
};

makeMap = function() {
  var i, _i, _results;
  platforms.push(new Platform(0, canvas.height / 2, 96, 16));
  _results = [];
  for (i = _i = 0; _i <= 30; i = ++_i) {
    _results.push(platforms.push(levels[lvl].getPlm()));
  }
  return _results;
};

$(document).ready(function() {
  initRecords();
  printLevels();
  $('.handle').css({
    width: 3 * (width() - 300) + "px"
  });
  new Dragdealer('lvl-menu', {
    vertical: false,
    steps: 3,
    loose: false,
    left: width() / 3,
    right: width() / 3
  });
  canvas = document.getElementById('screen');
  canvas.width = width();
  canvas.height = height();
  g = canvas.getContext("2d");
  g.mozImageSmoothingEnabled = false;
  g.imageSmoothingEnabled = false;
  return setScreen("main-menu");
});

startGame = function(_lvl) {
  document.onkeydown = function(e){
		switch (e.keyCode){
		    case 38 : jump();
		    		  break;
		    case 65 :
		    case 37 : left();
		    		  break;
		    case 68 :
		    case 39 : right();
		    		  break;
		}
	};;
  lvl = _lvl;
  $('.game-bg').css({
    background: "url(img/" + levels[lvl].bbg + ")"
  });
  $('#pauseBtn').show();
  $('#contBtn').hide();
  paused = false;
  scrollX = 0;
  scrollY = 0;
  distance = 0;
  $('#distance').html("0.00m");
  platforms = [];
  monsters = [];
  pl.init();
  makeMap();
  pl.y = platforms[0].y - 40;
  pl.x = 48;
  drawInterval = setInterval(draw, 50);
  plAniInterval = setInterval(plAni, 100);
  animInterval = setInterval(animFrame, 400);
  frameInterval = setInterval(frame, 5 * fs);
  return setScreen("game");
};

stopGame = function(screen) {
  if (screen == null) {
    screen = "main-menu";
  }
  if (parseFloat(localStorage['record-' + lvl]) < distance) {
    localStorage['record-' + lvl] = distance;
  }
  initRecords();
  printLevels();
  $('#over-distance').html(parseFloat(distance).toFixed(2) + "m");
  g.translate(scrollX, scrollY);
  clearInterval(drawInterval);
  clearInterval(plAniInterval);
  clearInterval(animInterval);
  clearInterval(frameInterval);
  return setScreen(screen);
};

pauseGame = function() {
  paused = true;
  $('#pauseBtn').hide();
  return $('#contBtn').show();
};

continueGame = function() {
  paused = false;
  $('#pauseBtn').show();
  return $('#contBtn').hide();
};

frame = function() {
  var i, m, _distance, _i, _len;
  if (paused) {
    return;
  }
  pl.y += pl.irany.y;
  pl.x += pl.irany.x;
  if (pl.irany.y < 2.0 * fs) {
    pl.irany.y += 0.025 * fs * fs;
  }
  if (pl.intersects()) {
    pl.irany.y = 0;
  }
  if (pl.x > canvas.width + scrollX - width() / 2) {
    moveCamX();
  }
  if (pl.y <= 50) {
    g.translate(0, scrollY - pl.y + 50);
    scrollY = pl.y - 50;
  } else if (scrollY !== 0) {
    g.translate(0, scrollY);
    scrollY = 0;
  } else if (pl.x < scrollX) {
    pl.irany.x = 0;
  }
  for (_i = 0, _len = monsters.length; _i < _len; _i++) {
    i = monsters[_i];
    i.move();
  }
  _distance = pl.x / 32 - 1.5;
  if (_distance > distance) {
    distance = _distance;
    $('#distance').html(parseFloat(distance).toFixed(2) + "m");
  }
  if (pl.y > canvas.height - 32) {
    stopGame("game-over");
    return;
  }
  if (pl.blink === 0) {
    if (m = intersect(pl, monsters)) {
      pl.hp -= monsters[m].dmg;
      pl.blink = 75;
      if (pl.hp === 0) {
        stopGame("game-over");
      }
    }
  } else {
    return pl.blink--;
  }
};

right = function() {
  keys.right = true;
  pl.irany.x = pl.speed * fs;
  return pl.imgIr = 1;
};

left = function() {
  if (pl.x < scrollX) {
    return;
  }
  keys.left = true;
  pl.irany.x = -pl.speed * fs;
  return pl.imgIr = -1;
};

jump = function() {
  if (pl.irany.y === 0) {
    return pl.irany.y = -2.5 * fs;
  }
};

animFrame = function() {
  if (paused) {
    return;
  }
  if (ani < 3) {
    ani++;
  } else {
    ani = 0;
  }
  if (ani8 < 7) {
    return ani8++;
  } else {
    return ani8 = 0;
  }
};

plAni = function() {
  if (paused) {
    return;
  }
  if (ani6 < 5) {
    return ani6++;
  } else {
    return ani6 = 0;
  }
};

draw = function() {
  var bgpos, groundPos, i, img, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2;
  g.clearRect(scrollX, scrollY, canvas.width, canvas.height);
  img = imgBank.get(levels[lvl].bg);
  bgpos = scrollX - scrollX % (img.width * 4) / 4;
  g.drawImage(img, bgpos, scrollY);
  g.drawImage(img, bgpos + img.width, scrollY);
  img = imgBank.get(levels[lvl].ground, 2);
  groundPos = scrollX - scrollX % img.width;
  g.drawImage(img, groundPos, canvas.height - 32);
  g.drawImage(img, groundPos + img.width, canvas.height - 32);
  for (_i = 0, _len = platforms.length; _i < _len; _i++) {
    i = platforms[_i];
    i.draw(g);
  }
  for (_j = 0, _len1 = monsters.length; _j < _len1; _j++) {
    i = monsters[_j];
    i.draw(g);
  }
  for (i = _k = 0, _ref = pl.hp; 0 <= _ref ? _k < _ref : _k > _ref; i = 0 <= _ref ? ++_k : --_k) {
    g.drawImage(imgBank.get("life.png"), 0, 0, 16, 16, scrollX + 8 + i * 18, scrollY + 8, 16, 16);
  }
  for (i = _l = _ref1 = pl.hp, _ref2 = pl.maxHp; _ref1 <= _ref2 ? _l < _ref2 : _l > _ref2; i = _ref1 <= _ref2 ? ++_l : --_l) {
    g.drawImage(imgBank.get("life.png"), 16, 0, 16, 16, scrollX + 8 + i * 18, scrollY + 8, 16, 16);
  }
  if (pl.irany.y !== 0) {
    if (pl.imgIr === -1) {
      g.drawImage(imgBank.get("pl-1.png"), pl.x, pl.y, pl.w, pl.h);
    } else {
      g.scale(-1, 1);
      g.drawImage(imgBank.get("pl-1.png"), -pl.x - pl.w, pl.y, pl.w, pl.h);
      g.scale(-1, 1);
    }
  } else if (pl.irany.x === 0) {
    if (pl.imgIr === -1) {
      g.drawImage(imgBank.get("pl-2.png"), pl.x, pl.y, pl.w, pl.h);
    } else {
      g.scale(-1, 1);
      g.drawImage(imgBank.get("pl-2.png"), -pl.x - pl.w, pl.y, pl.w, pl.h);
      g.scale(-1, 1);
    }
  } else {
    if (pl.imgIr > 0) {
      g.scale(-1, 1);
      g.drawImage(imgBank.get("pl-0.png"), pl.w * ani6, 0, pl.w, pl.h, -pl.x - pl.w, pl.y, pl.w, pl.h);
      g.scale(-1, 1);
    } else {
      g.drawImage(imgBank.get("pl-0.png"), pl.w * ani6, 0, pl.w, pl.h, pl.x, pl.y, pl.w, pl.h);
    }
  }
  if (pl.blink > 0 && ani !== 0) {
    return drawRect(pl.x, pl.y, pl.w, pl.h, "rgba(255, 0, 0, 0.5)");
  }
};

moveCamX = function() {
  var del, _results;
  scrollX += pl.irany.x;
  g.translate(-pl.irany.x, 0);
  del = intersect(platforms, {
    x: 0,
    y: 0,
    w: scrollX,
    h: canvas.height
  }, true, true);
  deleteFrom(del, platforms);
  del = intersect(monsters, {
    x: 0,
    y: 0,
    w: scrollX,
    h: canvas.height
  }, true, true);
  deleteFrom(del, monsters);
  _results = [];
  while (topOf(platforms).x < scrollX + canvas.width) {
    _results.push(platforms.push(levels[lvl].getPlm()));
  }
  return _results;
};

drawRect = function(x, y, w, h, s) {
  g.beginPath();
  g.rect(x, y, w, h);
  g.fillStyle = s;
  g.lineWidth = 0;
  return g.fill();
};

screens = ["main-menu", "game-over", "lvl-menu", "game"];

setScreen = function(str) {
  var i, _i, _len;
  for (_i = 0, _len = screens.length; _i < _len; _i++) {
    i = screens[_i];
    $("#" + i).hide();
  }
  return $("#" + str).show();
};

initRecords = function() {
  var i, _i, _results;
  _results = [];
  for (i = _i = 0; 0 <= maxlvl ? _i < maxlvl : _i > maxlvl; i = 0 <= maxlvl ? ++_i : --_i) {
    if (!localStorage['record-' + i]) {
      localStorage['record-' + i] = 0;
    }
    _results.push(levels[i].record = parseFloat(localStorage['record-' + i]).toFixed(2));
  }
  return _results;
};

var resize = function( img, scale ) {
    // Takes an image and a scaling factor and returns the scaled image
    
    // The original image is drawn into an offscreen canvas of the same size
    // and copied, pixel by pixel into another offscreen canvas with the 
    // new size.
    
    var widthScaled = img.width * scale;
    var heightScaled = img.height * scale;
    
    var orig = document.createElement('canvas');
    orig.width = img.width;
    orig.height = img.height;
    var origCtx = orig.getContext('2d');
    origCtx.drawImage(img, 0, 0);
    var origPixels = origCtx.getImageData(0, 0, img.width, img.height);
    
    var scaled = document.createElement('canvas');
    scaled.width = widthScaled;
    scaled.height = heightScaled;
    var scaledCtx = scaled.getContext('2d');
    var scaledPixels = scaledCtx.getImageData( 0, 0, widthScaled, heightScaled );
    
    for( var y = 0; y < heightScaled; y++ ) {
        for( var x = 0; x < widthScaled; x++ ) {
            var index = (Math.floor(y / scale) * img.width + Math.floor(x / scale)) * 4;
            var indexScaled = (y * widthScaled + x) * 4;
            scaledPixels.data[ indexScaled ] = origPixels.data[ index ];
            scaledPixels.data[ indexScaled+1 ] = origPixels.data[ index+1 ];
            scaledPixels.data[ indexScaled+2 ] = origPixels.data[ index+2 ];
            scaledPixels.data[ indexScaled+3 ] = origPixels.data[ index+3 ];
        }
    }
    scaledCtx.putImageData( scaledPixels, 0, 0 );
    return scaled;
};


function width(){
	return $(window).width();
}
function height(){
	return $(window).height();
}
;

Monster = (function() {
  Monster.prototype.w = 16;

  Monster.prototype.h = 32;

  Monster.prototype.speed = 0.2 * fs;

  Monster.prototype.dmg = 1;

  Monster.prototype.img = "monster-2.png";

  function Monster(platform) {
    this.platform = platform;
    this.x = platform.x + platform.w / 2;
    this.y = platform.y - 32;
    this.endRight = this.platform.x + this.platform.w - 24 - this.speed;
    this.endLeft = this.platform.x + 8 - this.speed;
    this.w = 16;
    this.h = 32;
  }

  Monster.prototype.move = function() {
    this.x += this.speed;
    if (this.x < this.endLeft || this.x > this.endRight) {
      return this.speed = -this.speed;
    }
  };

  Monster.prototype.draw = function(g) {
    if (this.speed > 0) {
      g.scale(-1, 1);
      g.drawImage(imgBank.get(this.img), 16 * ani, 0, 16, 32, -this.x - 16, this.y, 16, 32);
      return g.scale(-1, 1);
    } else {
      return g.drawImage(imgBank.get(this.img), 16 * ani, 0, 16, 32, this.x, this.y, 16, 32);
    }
  };

  return Monster;

})();

Slime = (function(_super) {
  __extends(Slime, _super);

  function Slime() {
    _ref = Slime.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Slime.prototype.img = "monster-2.png";

  Slime.prototype.speed = 0.05 * fs;

  return Slime;

})(Monster);

Onion = (function(_super) {
  __extends(Onion, _super);

  function Onion() {
    _ref1 = Onion.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Onion.prototype.img = "monster-1.png";

  return Onion;

})(Monster);

Mummy = (function(_super) {
  __extends(Mummy, _super);

  function Mummy() {
    _ref2 = Mummy.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  Mummy.prototype.img = "monster-3.png";

  Mummy.prototype.speed = 0.1 * fs;

  Mummy.prototype.draw = function(g) {
    if (this.speed > 0) {
      g.scale(-1, 1);
      g.drawImage(imgBank.get(this.img), 16 * ani8, 0, 16, 32, -this.x - 16, this.y, 16, 32);
      return g.scale(-1, 1);
    } else {
      return g.drawImage(imgBank.get(this.img), 16 * ani8, 0, 16, 32, this.x, this.y, 16, 32);
    }
  };

  return Mummy;

})(Monster);
